
WHITESPACE = _{ " " | "\t" | "\r" | NEWLINE }
COMMENT = _{ ( "/*" ~ (!"*/" ~ ANY)* ~ "*/" ) | ("//" ~ (!(NEWLINE) ~ ANY)* ~ NEWLINE) }

//////
/// BEGIN TEMPLATE
//////

//A template is expressed as an XML-like document with support for
//@property binding and @{}-style templating (embedding expressions)

//A template has exactly one root tag
dash_file = { SOI ~ any_tag ~ properties_declaration? ~ EOI }

//On the other hand, a sub_template (e.g. the child-contents of an element)
//may have multiple top-level siblings
sub_template = { (any_tag | statement_control_flow )* }

//This duo describes an XML-style open-tag, like <SomeElement id="...">
//and matching close-tag, like </SomeElement>
open_tag = {"<" ~ PUSH(pascal_identifier) ~ attribute_key_value_pair* ~ ">"}
closing_tag = {"</" ~ POP ~ ">"} //TODO: don't accept whitespace like < / SomeElement > ?

//Describes an attribute k/v pair like `id="some_element"`. Supports expressions.
attribute_key_value_pair = _{identifier ~ "=" ~ any_template_value}
any_template_value = {string | expression}
any_tag = _{matched_tag | self_closing_tag}

//Describes an XML subtree surrounded by a pair of matching tags, like
//<SomeElement>...</SomeElement>
matched_tag = {open_tag ~ sub_template ~ closing_tag}

//Describes a (leaf-node) self-closing element, like <SomeElement />
self_closing_tag = {"<" ~ pascal_identifier ~ attribute_key_value_pair* ~ "/>"}

//string/inner/char from https://pest.rs/book/examples/json.html
string = ${ ("\"" ~ inner ~ "\"") | ("'" ~ inner ~ "'") }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

//Describes a symbolic identifier, like `id` or `Engine`
identifier = { (ASCII_ALPHANUMERIC | "_" | "-")+ }

//Describes a symbolic identifier with an Uppercase first letter, a la PascalCase
//Does not enforce the presence of any other uppercase letters.
//Intended as convention for symbolic ids in expressions, e.g. `Engine`, and
//for namespaced access of symbolic ids, like `Orientation::Vertical`
pascal_identifier = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_" | "-")*}


//////
/// BEGIN PROPERTIES
//////
properties_declaration = {"@properties" ~ "{" ~ selector_block* ~ "}"}
selector_block = {selector ~ literal_object}
literal_object = { identifier? ~ "{" ~ properties_key_value_pair* ~ "}" }

//Describes a CSS-style selector, used for joining properties to elements
//Note: only basic `id` and `class` syntax supported for now; could be extended
//Example: `#some-element`
selector = @{("." | "#") ~ identifier}

//Describes a key-value pair in a properties block, which supports a number of formats,
//included recursive nesting via `property_block`
properties_key_value_pair = { properties_key ~ properties_value ~ ","? }
properties_key = @{ identifier ~ ":" }
properties_value = { literal_value | enum_value | expression | literal_object }

literal_value = { literal_number_with_unit | literal_number | literal_array | string }
literal_number_with_unit = @{ literal_number ~ literal_number_unit }
literal_number = {literal_number_float | literal_number_integer}
literal_number_integer = {(!(".") ~ ASCII_DIGIT)+ }
literal_number_float = {ASCII_DIGIT ~ "." ~ ASCII_DIGIT+}
literal_number_unit = {("%" | "px")}
literal_array = {("[") ~ literal_value ~ ("," ~ literal_value)* ~ ("]")}

//Enums like Orientation::Vertical
enum_value = @{pascal_identifier ~ ("::" ~ pascal_identifier ~ ("("~enum_args_list~")")?)?}
//Experimental/probably incomplete: pass values to enums, like rust but variadically
enum_args_list = !{properties_value ~ ("," ~ properties_value)*}


//////
/// BEGIN EXPRESSIONS
//////

//Expressions can be:
// a.) symbolic bindings to properties, e.g. `@num_clicks`
// b.) lambdas, where types will be enforced by semantizer
expression = @{
    "@" ~ (expression_symbolic_binding | expression_lambda)
}

expression_symbolic_binding = {identifier ~ ("." ~ identifier)*}
expression_lambda = !{"{"~expression_body~"}"}

//Expression body may be a binary operation like `x + 5` or `num_clicks % 2 == 0`
//or a bare returned value like `Color { ... }`
expression_body = { expression_binary | expression_operand }
expression_binary = {
    //left side
    xo_prefix_unary? ~ expression_operand ~
    //operator
    xo_infix_binary ~
    //right side
    xo_prefix_unary? ~ expression_operand
}

//terminal, or recurse into `(...)`
expression_operand = { expression_grouped | xo_literal | xo_symbol }
expression_grouped = { "(" ~ expression_body ~ ")" }

/*
Some examples of valid expressions:

[Object construction]
Color {h: 360, s: 1, l: 1, a: 1}

[Object construction with implicit type (type enforced by semantizer)
{h: 360, s: 1, l: 1, a: 1}

[Boolean statements]
num_clicks % 2 == 0

[Complex statements including ternaries, grouping, logical operators, and object construction]
(num_clicks % 2 == 0 && is_selected) ?
    {r: 255 * color_intensity, g: 0, b: 0, a: 1} :
    {r: 0, g: 255 * color_intensity, b: 0, a: 1}

[String literals + operations]
"Is " + (is_selected ? "" : "not ") + "selected."
*/

//`xo` is short for both "expression operator" and "expression operand", collectively all symbols
//that can be expressed inside expressions
xo_infix_binary = {
    xo_bool_or | xo_bool_and |
    xo_addition | xo_subtraction |
    xo_multiplication | xo_division |
    xo_modulus | xo_exponent
}

//Our only unary operators are both prefix:
//`-` for numeric negation and `!` for boolean negation
xo_prefix_unary = {
    xo_bool_not | xo_subtraction
}

xo_literal = {literal_number | string | literal_array | literal_object} //TODO: consolidate literal_object with the recursive properties_block impl for properties
xo_symbol = @{identifier ~ (("." ~ identifier) | ("::" ~ identifier))*}

xo_group_open = {"("}
xo_group_close = {")"}
xo_obj_open = {"{"}
xo_obj_close = {"{"}
xo_obj_separator = {","}
xo_bool_or = {"||"}
xo_bool_and = {"&&"}
xo_addition = {"+"}
xo_subtraction = {"-"}
xo_multiplication = {"*"}
xo_division = {"/"}
xo_modulus = {"%"}
xo_exponent = {"^"}
xo_bool_not = {"!"}
xo_tern_then = {"?"}
xo_tern_else = {":"}
xo_rel_lt = {"<"}
xo_rel_gt = {">"}
xo_rel_lte = {"<="}
xo_rel_gte = {">="}
xo_rel_eq = {"=="}
xo_rel_neq = {"!="}



//////
/// BEGIN CONTROL FLOW
//////

//Control flow statements, while sharing the `@` syntax of expressions
//and using expressions for their statement syntax (`@if (some_value == 2)`)
//are NOT embeddable all places that expressions are.  That is, control-flow statements
//can only sit alongside elements in a template and cannot be bound to properties.  As a result,
//and to foster clarity of nomenclature, we call these `statements` rather than `expressions`.
statement_control_flow = {"@" ~ (statement_if | statement_foreach | statement_placeholder)}

statement_if = {"if" ~ "(" ~ expression_body ~ ")" ~ "{" ~ sub_template ~ "}"} //TODO: else
statement_foreach = {"foreach" ~ "(" ~ expression_body ~ ")" ~ "{" ~ sub_template ~ "}"}
statement_placeholder = {"placeholder"}

