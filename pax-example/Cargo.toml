[package]
name = "pax-example"
version = "0.1.0"
authors = ["Zack Brown <zack@inclination.co>"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html


#TODO: delete this section once lib.rs is expanded by macro
[lib]
name="pax_example"
path = "src/lib-expanded.rs"


### GENERATE
#[[bin]]
#name = "parser"
#path = "src/lib-expanded.rs"
#required-features = ["parser"]
### END GENERATE

[features]
### GENERATE
parser = ["pax-std/parser"]
### END GENERATE

[dependencies]
pax = {path = "../pax"}
pax-std = {path = "../pax-std"}
#pax-compiler = {path = "../pax-compiler"}
### REMOVE once lazy_static pascal_identifier hack is removed from manually expanded prototype macros
lazy_static = "*"
#
##[patch]
#[patch.'file://../pax-properties-coproduct']
##TODO: is this the right place to patch this?  pax-properties-coproduct isn't a dep of a cartridge!
##      - we want to patch pax itself!  a naive approach would be to patch pax to a local clone of the source
##        (e.g. inside .pax) â€” and to modify the Cargo.toml in there.  This would be a "deep patch", but
##        is getting mighty hacky.
#pax-properties-coproduct = { path = "./.pax-manual/patches/pax-properties-coproduct"}

#can also try, even though it's deprecated:
#[replace]
#"foo:0.1.0" = { git = 'https://github.com/example/foo' }
#"bar:1.0.2" = { path = 'my/local/bar' }

