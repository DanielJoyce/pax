
WHITESPACE = _{ " " | "\t" | "\r" | NEWLINE }
COMMENT = _{ ( "/*" ~ (!"*/" ~ ANY)* ~ "*/" ) | ("//" ~ (!(NEWLINE) ~ ANY)* ~ NEWLINE) }

//////  //////  //////
/// BEGIN TEMPLATE
//////

//A template is expressed as an XML-like document with support for
//property binding, control-flow (if, for) and {}-style templating (embedding expressions)

//A template has exactly one root tag, which cannot be control-flow (why?)
//A component definition requires at least one element in its template; a `@settings` block may also be included, and any future relevant blocks like `@defaults`
//The parser will willingly _parse_ multiple @settings/@template blocks per component definition, but the compiler won't presently support them
pax_component_definition = { SOI ~ (root_tag_pair | settings_block_declaration)+ ~ EOI }
root_tag_pair = { any_tag_pair }

//On the other hand, the inner_nodes (children of another tag)
//may have multiple top-level siblings
inner_nodes = { node_inner_content | (any_tag_pair)* }

//This duo describes an XML-style open-tag, like <SomeElement id="...">
//and matching close-tag, like </SomeElement>
open_tag = {"<" ~ PUSH(pascal_identifier) ~ attribute_key_value_pair* ~ ">"}
closing_tag = {"<" ~ "/" ~ POP ~ ">"} //TODO: should we accept whitespace like < / SomeElement > ?

//Describes an attribute k/v pair like `id="some_element"`. Supports expressions.
attribute_key_value_pair = {attribute_event_binding | (identifier ~ "=" ~ any_template_value)}
attribute_event_id = {"@" ~ identifier}
attribute_event_binding = {attribute_event_id ~ "=" ~ expression_symbolic_binding}

//`...=5.0`, `...={...}`, `id=some_id`
any_template_value = {literal_value | expression | identifier}
any_tag_pair = _{statement_control_flow | matched_tag | self_closing_tag}

//Describes an XML subtree surrounded by a pair of matching tags, like
//<SomeElement>...</SomeElement>
matched_tag = {open_tag ~ inner_nodes ~ closing_tag}
//For example: <Text>"This is my inner content"</Text>
//Presumably this content can be bare literal values other than strings like Color::hlca(...)
//It could also be an `{...}` expression
node_inner_content = { literal_value | expression }

//Describes a (leaf-node) self-closing element, like <SomeElement />
self_closing_tag = {"<" ~ pascal_identifier ~ attribute_key_value_pair* ~ "/" ~ ">"}

//string/inner/char from https://pest.rs/book/examples/json.html
string = ${ ("\"" ~ inner ~ "\"") | ("'" ~ inner ~ "'") | ("`" ~ (inner_templated | inner) ~ "`") }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

inner_templated = { (char* ~ ("{" ~ inner_templated_dynamic ~ "}"))+ }
inner_templated_dynamic = {char*}

//Describes an atomic symbolic identifier, like `id`, `Engine`, or `some_thing`
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

//Describes a symbolic identifier with an Uppercase first letter, a la PascalCase
//Does not enforce the presence of any other uppercase letters.
//Intended as convention for symbolic ids in expressions, e.g. `Engine`, specification
//of explicit types in polymorphic/enum contexts (e.g. `fill: Color {...}`), and
//for namespaced access of symbolic ids, like `Orientation::Vertical`
pascal_identifier = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")*}


//////  //////  //////
/// BEGIN SETTINGS
//////

settings_block_declaration = {"@" ~ "settings" ~ "{" ~ selector_block* ~ "}"}
selector_block = {selector ~ literal_object}
literal_object = { pascal_identifier? ~ "{" ~ settings_key_value_pair* ~ "}" }

//Describes a CSS-style selector, used for joining settings to elements
//Note: only basic `id` and `class` syntax supported for now; could be extended
//Example: `#some-element`
selector = {("." | "#") ~ identifier}

//Describes a key-value pair in a settings block, which supports a number of formats,
//included recursive nesting via `property_block`
settings_key_value_pair = { settings_key ~ settings_value ~ ","? }
settings_key = { identifier ~ ":" }
settings_value = { literal_value | literal_object | expression }

literal_value = { literal_number_with_unit | literal_number | literal_tuple | literal_enum_value | string }
literal_number_with_unit = { literal_number ~ literal_number_unit }
literal_number = {literal_number_float | literal_number_integer}
literal_number_integer = {(!(".") ~ ASCII_DIGIT)+ }
literal_number_float = {ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+}
literal_number_unit = {("%" | "px")}
literal_tuple = {("(") ~ literal_value ~ ("," ~ literal_value)* ~ (")")}

//Enums like Orientation::Vertical or Color::Rgba(100%, 100%, 0, 0)
//Note that this is parsed separately from expression enums, `xo_enum*`
literal_enum_value = {pascal_identifier ~ ("::" ~ pascal_identifier)* ~ ("("~literal_enum_args_list~")")?}
literal_enum_args_list = {literal_value ~ ("," ~ literal_value)*}

//////  //////  //////
/// BEGIN EXPRESSIONS (PAXEL)
//////

//Expressions can be:
// a.) symbolic bindings to component properties, e.g. `@num_clicks`
// b.) lambdas, where types will be enforced by downstream compiler
expression = {
    "{" ~ (expression_body) ~ "}"
}

expression_symbolic_binding = {identifier ~ ("." ~ identifier)*}

//Expression body may be a binary operation like `x + 5` or `num_clicks % 2 == 0`
//or a literal returned value like `Color { ... }` or `5`
expression_body = { expression_operand ~ (xo_infix_binary ~ expression_operand)* }

//terminal, or recurse into `(...)`
expression_operand = { expression_grouped | xo_function_call | xo_range | xo_literal | xo_tuple | xo_symbol }
expression_grouped = { "(" ~ expression_body ~ ")" ~ literal_number_unit? }

/*
Some examples of valid expressions:

[Object construction]
Color {h: 360, s: 1, l: 1, a: 1}

[Object construction with implicit type (type enforced by downstream compiler)
{h: 360, s: 1, l: 1, a: 1}

[Boolean statements]
num_clicks % 2 == 0

[Complex statements including ternaries, grouping, logical operators, and object construction]
(num_clicks % 2 == 0 && is_selected) ?
    {r: 255 * color_intensity, g: 0, b: 0, a: 1} :
    {r: 0, g: 255 * color_intensity, b: 0, a: 1}

[String literals + operations]
"Is " + (is_selected ? "" : "not ") + "selected."
*/

//`xo` is short for both "expression operator" and "expression operand", collectively all symbols
//that can be expressed inside expressions
xo_infix_binary = {
    xo_bool_or | xo_bool_and |
    xo_rel_eq | xo_rel_neq | xo_rel_lte | xo_rel_gte | xo_rel_gt | xo_rel_lt |
    xo_add | xo_sub |
    xo_mul | xo_div |
    xo_mod | xo_exp
}

//Our only unary operators are both prefix:
//`-` for numeric negation and `!` for boolean negation
xo_prefix_unary = {
    xo_bool_not | xo_sub
}

xo_literal = {literal_enum_value  | literal_number_with_unit | literal_number  | string | literal_tuple  | xo_literal_object}

//Note that `xo_literal_object` differs from `settings` literal_object because it accepts
//expressions for property values without having to enter a {} context (because these
//are already evaluated inside an `{}` context)
xo_literal_object = { identifier? ~ "{" ~ xo_literal_object_settings_key_value_pair* ~ "}" }
xo_literal_object_settings_key_value_pair = { settings_key ~ expression_body ~ ","? }

xo_symbol = { "$"? ~ identifier ~ (("." ~ identifier) | ("::" ~ identifier) |  ("[" ~ expression_body ~ "]") )* }
xo_tuple = { "(" ~ expression_body ~ ("," ~ expression_body)* ~ ")"}


xo_bool_or = {"||"}
xo_bool_and = {"&&"}
xo_add = {"+"}
xo_sub = {"-"}
xo_mul = {"*"}
xo_div = {"/"}
xo_mod = {"%%"}
xo_exp = {"^"}
xo_bool_not = {"!"}
xo_tern_then = {"?"}
xo_tern_else = {":"}
xo_rel_lt = {"<"}
xo_rel_gt = {">"}
xo_rel_lte = {"<="}
xo_rel_gte = {">="}
xo_rel_eq = {"=="}
xo_rel_neq = {"!="}
//Examples:
//`0..10`
//`"abc".."def"` <- will parse OK but will rely on Rust's support for constructing ranges from these types/operands
//`this.num_clicks..25`
xo_range = { (xo_literal | expression_symbolic_binding) ~ (xo_range_inclusive | xo_range_exclusive) ~ (xo_literal | expression_symbolic_binding)}
xo_range_exclusive = @{".."}
xo_range_inclusive = @{"..."}

xo_function_call = {identifier ~ (("::" | ".") ~ identifier)* ~ ("("~xo_function_args_list~")")}
xo_function_args_list = {expression_body ~ ("," ~ expression_body)*}

//////  //////  //////
/// BEGIN CONTROL FLOW
//////

//Control flow statements are NOT embeddable all places that expressions are.  That is, control-flow statements
//can only sit alongside elements in a template and cannot be bound to properties.  As a result,
//and to foster clarity of nomenclature, we call these `statements` rather than `expressions`.
//These statements work as syntactic sugar for built-in primitives: Conditional, Repeat, and Slot.
statement_control_flow = {(statement_if | statement_for | statement_slot)}

statement_if = {"if" ~ expression_body ~ "{" ~ inner_nodes ~ "}"} //TODO: else
statement_for = {"for" ~ statement_for_predicate_declaration ~ "in" ~ statement_for_predicate_source ~ "{" ~ inner_nodes ~ "}"}
statement_slot = {"slot" ~ expression_body}

//Examples:
//for i | for (elem, i)
statement_for_predicate_declaration = {
    identifier |
    ("(" ~ identifier ~ ","~ identifier ~")")
}

//Examples:
// in some_symbol
// in self.some_symbol
// in this.Pascal_snake-kebab
// in 0..5
// in this.some_symbol..25
// in 25..some_symbolx
statement_for_predicate_source = { xo_range | expression_symbolic_binding }  //Uses `expression_symbolic_binding` for the definition, which is reasonable because `for` preambles are evaluated as expressions
