//Following is the macro expansion of: #[pax_primitive("./pax-std-primitives", crate::{{pascal_identifier}}Instance)]
{{original_tokens}}
#[cfg(feature = "parser")]
impl {{pascal_identifier}} {
    pub fn parse_to_manifest(mut ctx: ManifestContext) -> (ManifestContext, String) {
        let source_id = "primitive::{{pascal_identifier}}";
        match ctx.visited_source_ids.get(&source_id as &str) {
            None => {
                //First time visiting this file/source â€” parse the relevant contents
                //then recurse through child nodes, unrolled here in the macro as
                //parsed from the template
                ctx.visited_source_ids.insert(source_id.to_string());
                let PASCAL_IDENTIFIER = "{{pascal_identifier}}";
                ctx.template_map.insert(PASCAL_IDENTIFIER.to_string(), source_id.to_string());
                let template_map= ctx.template_map.clone();

                // Recurse through all types present in `Property<>` definitions --
                // call get_property_manifest for each of them (except whitelist)
                // This data is used (at least) for generating the `pub mod types` re-export
                // at the root of a userland project (`pax_root`)
                let mut property_manifests = vec![];
                {% for property_definition in local_compile_time_property_definitions %}
                    {% for scoped_atomic_type in property_definition.scoped_atomic_types %}
                        let property_manifest = {{scoped_atomic_type}}::get_property_manifest("{{property_definition.field_name}}", "{{scoped_atomic_type}}");
                        property_manifests.push(property_manifest);
                    {% endfor %}
                {% endfor %}
                ctx.property_manifests.insert(source_id.to_string(), property_manifests.clone());

                let comp_def = pax_compiler_api::get_primitive_definition(PASCAL_IDENTIFIER, module_path!(), &source_id, &property_manifests);
                ctx.component_definitions
                    .push(comp_def);
                (ctx, source_id.to_string())
            },
            _ => (ctx, source_id.to_string()), //early return; this file has already been parsed
        }
    }
}