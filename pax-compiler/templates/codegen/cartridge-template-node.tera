Rc::new(RefCell::new(vec![
//Horizontal stacker
instantiate_component_stacker(
Rc::clone(&instance_registry),
InstantiationArgs {
properties: PropertiesCoproduct::Stacker(Stacker {
computed_layout_spec: Default::default(),
direction: Default::default(),
cells: Box::new(PropertyLiteral::new(10)),
gutter_width: Box::new(PropertyLiteral::new(Size::Pixels(5.0))),
overrides_cell_size: Default::default(),
overrides_gutter_size: Default::default(),
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Rc::new(RefCell::new(PropertyLiteral::new(Transform2D::rotate(0.0)))),
size: Some([Box::new(PropertyLiteral::new(Size::Percent(100.0))), Box::new(PropertyLiteral::new(Size::Percent(100.0)))]),
children: Some(Rc::new(RefCell::new(vec![
//Vertical stacker
instantiate_component_stacker(
Rc::clone(&instance_registry),
InstantiationArgs {
properties: PropertiesCoproduct::Stacker(Stacker {
computed_layout_spec: Default::default(),
direction: Box::new(PropertyLiteral::new(StackerDirection::Vertical)),
cells: Box::new(PropertyLiteral::new(5)),
gutter_width: Box::new(PropertyLiteral::new(Size::Pixels(5.0))),
overrides_cell_size: Default::default(),
overrides_gutter_size: Default::default(),
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Rc::new(RefCell::new(PropertyLiteral::new(Transform2D::rotate(0.0)))),
size: Some([Box::new(PropertyLiteral::new(Size::Percent(100.0))), Box::new(PropertyLiteral::new(Size::Percent(100.0)))]),
children: Some(Rc::new(RefCell::new(vec![
RepeatInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::None,
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: None,
children: Some(Rc::new(RefCell::new( vec![
GroupInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::Group(Group{}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: Some(Rc::new(RefCell::new(vec![
TextInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::Text( Text {
content: Box::new(PropertyLiteral::new("Hello".to_string()) ),
fill: Box::new(PropertyLiteral::new(Color::rgba(1.0,1.0,1.0,1.0))),
font: Default::default(),
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: None,
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
}),
RectangleInstance::instantiate(InstantiationArgs{
properties: PropertiesCoproduct::Rectangle(Rectangle {
stroke: pax_example::pax_reexports::pax_std::types::Stroke{
color: Box::new(PropertyLiteral::new(Color::rgba(0.0,0.0,0.0,0.0))),
width: Box::new(PropertyLiteral::new(SizePixels(0.0))),
},
fill: Box::new(PropertyExpression::new(7))
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: None,
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
}),
]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
})
]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: Some(Box::new(PropertyLiteral::new((0..8).into_iter().map(|i|{
Rc::new(PropertiesCoproduct::isize(i))
}).collect()))),
conditional_boolean_expression: None,
compute_properties_fn: None
}),

]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None,
}
),
RepeatInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::None,
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: None,
children: Some(Rc::new(RefCell::new( vec![
GroupInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::Group(Group{}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: Some(Rc::new(RefCell::new(vec![
TextInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::Text( Text {
content: Box::new(PropertyExpression::new(6) ),
fill: Box::new(PropertyLiteral::new(Color::rgba(0.0,0.0,0.0,1.0))),
font: Font {
family: Box::new(PropertyLiteral::new("Real Head Pro".to_string())),
variant: Box::new(PropertyLiteral::new("Light".to_string())),
size: Box::new(PropertyExpression::new(10)),
},
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Rc::new(RefCell::new(PropertyExpression::new(8))),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Pixels(55.0)).into()]),
children: None,
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
}),
RectangleInstance::instantiate(InstantiationArgs{
properties: PropertiesCoproduct::Rectangle(Rectangle {
stroke: pax_example::pax_reexports::pax_std::types::Stroke{
color: Box::new(PropertyLiteral::new(Color::rgba(0.0,0.0,0.0,0.0))),
width: Box::new(PropertyLiteral::new(SizePixels(0.0))),
},
fill: Box::new(PropertyExpression::new(9)),
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: None,
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
}),
]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
})
]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: Some(Box::new(PropertyLiteral::new((0..8).into_iter().map(|i|{
Rc::new(PropertiesCoproduct::isize(i))
}).collect()))),
conditional_boolean_expression: None,
compute_properties_fn: None
}),
GroupInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::Group(Group {}),
handler_registry: Some(Rc::new(RefCell::new(
HandlerRegistry {
click_handlers: vec![
|stack_frame, args|{
const STACK_FRAME_OFFSET : isize = 2;
let SCOPED_STACK_FRAME = (*stack_frame).borrow().nth_descendant(STACK_FRAME_OFFSET); //just gen `ec.stack_frame` if offset == 0

let properties = SCOPED_STACK_FRAME.deref().borrow().get_properties();
let properties = &mut *(*properties).borrow_mut();
let properties = if let PropertiesCoproduct::HelloWorld(p) = properties {p} else {unreachable!()};
Root::handle_click(properties, args);
}
],
will_render_handlers: vec![],
}
))),
instance_registry: Rc::clone(&instance_registry),
transform: Rc::new(RefCell::new(PropertyExpression::new(5))),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: Some(Rc::new(RefCell::new(vec![
TextInstance::instantiate(InstantiationArgs {
properties: PropertiesCoproduct::Text( Text {
content: Box::new(PropertyLiteral::new(JABBERWOCKY.to_string()) ),
fill: Box::new(PropertyLiteral::new(Color::rgba(0.0,0.0,0.0,1.0))),
font: Default::default(),
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: None,
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
}),
RectangleInstance::instantiate(InstantiationArgs{
properties: PropertiesCoproduct::Rectangle(Rectangle {
stroke: pax_example::pax_reexports::pax_std::types::Stroke{
color: Box::new(PropertyLiteral::new(Color::rgba(0.0,0.0,0.0,0.0))),
width: Box::new(PropertyLiteral::new(SizePixels(0.0))),
},
fill: Box::new(PropertyLiteral::new(Color::rgba(1.0, 1.0, 0.0, 1.0)))
}),
handler_registry: None,
instance_registry: Rc::clone(&instance_registry),
transform: Transform2D::default_wrapped(),
size: Some([PropertyLiteral::new(Size::Percent(100.0)).into(),PropertyLiteral::new(Size::Percent(100.0)).into()]),
children: None,
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None
}),
]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None,
}),
]))),
component_template: None,
scroller_args: None,
slot_index: None,
repeat_source_expression: None,
conditional_boolean_expression: None,
compute_properties_fn: None,
}
),
]))),